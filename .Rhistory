mom_dob$mom_demo_momdob_1 <- ifelse(mom_dob$mom_demo_momdob_1 > "2010-01-01" | mom_dob$mom_demo_momdob_1 < "1950-01-01", NA_real_, mom_dob$mom_demo_momdob_1)
mom_dob$mom_demo_momdob_2 <- ifelse(mom_dob$mom_demo_momdob_2 > "2010-01-01" | mom_dob$mom_demo_momdob_2 < "1950-01-01", NA_real_, mom_dob$mom_demo_momdob_2)
mom_dob[cols] <- lapply(mom_dob[cols], as.Date, origin="1970-01-01")
mom_dob$mom_dob_final <- dplyr::case_when(
!is.na(mom_dob$mom_demo_momdob_2) ~ mom_dob$mom_demo_momdob_2,
is.na(mom_dob$mom_demo_momdob_2) & !is.na(mom_dob$mom_demo_momdob_1) ~ mom_dob$mom_demo_momdob_1,
is.na(mom_dob$mom_demo_momdob_2) & is.na(mom_dob$mom_demo_momdob_1) & !is.na(mom_dob$birth_date) ~ mom_dob$birth_date
)
return(mom_dob)
}
mom_dob <- get_mom_dob(token)
get_mom_dob <- function(token) {
birth_date <- get_field(token, field = "birth_date")
birth_date <- dplyr::select(birth_date, -redcap_event_name)
mom_demo_momdob <- get_field(token, field = "mom_demo_momdob")
mom_demo_momdob$redcap_event_name <- gsub("infant_visits_arm_1", "1", mom_demo_momdob$redcap_event_name)
mom_demo_momdob$redcap_event_name <- gsub("infant_30months_arm_1", "2", mom_demo_momdob$redcap_event_name)
mom_demo_momdob <- tidyr::pivot_wider(mom_demo_momdob, id_cols = record_id, names_from = redcap_event_name, values_from = mom_demo_momdob, names_prefix = "mom_demo_momdob_")
mom_dob <- dplyr::full_join(birth_date, mom_demo_momdob, by="record_id")
cols <- c("birth_date", "mom_demo_momdob_1", "mom_demo_momdob_2")
mom_dob[cols] <- lapply(mom_dob[cols], as.Date, format = "%Y-%m-%d")
mom_dob$birth_date <- ifelse(mom_dob$birth_date > "2010-01-01" | mom_dob$birth_date < "1950-01-01", NA_real_, mom_dob$birth_date)
mom_dob$mom_demo_momdob_1 <- ifelse(mom_dob$mom_demo_momdob_1 > "2010-01-01" | mom_dob$mom_demo_momdob_1 < "1950-01-01", NA_real_, mom_dob$mom_demo_momdob_1)
mom_dob$mom_demo_momdob_2 <- ifelse(mom_dob$mom_demo_momdob_2 > "2010-01-01" | mom_dob$mom_demo_momdob_2 < "1950-01-01", NA_real_, mom_dob$mom_demo_momdob_2)
mom_dob[cols] <- lapply(mom_dob[cols], as.Date, origin="1970-01-01")
mom_dob$mom_dob_final <- dplyr::case_when(
!is.na(mom_dob$mom_demo_momdob_2) ~ mom_dob$mom_demo_momdob_2,
is.na(mom_dob$mom_demo_momdob_2) & !is.na(mom_dob$mom_demo_momdob_1) ~ mom_dob$mom_demo_momdob_1,
is.na(mom_dob$mom_demo_momdob_2) & is.na(mom_dob$mom_demo_momdob_1) & !is.na(mom_dob$birth_date) ~ mom_dob$birth_date
)
mom_dob <- dplyr::select(record_id, mom_dob_final)
return(mom_dob)
}
mom_dob <- get_mom_dob(token)
View(mom_dob)
#add this to copedata not coperipple package
get_mom_dob <- function(token) {
birth_date <- get_field(token, field = "birth_date")
birth_date <- dplyr::select(birth_date, -redcap_event_name)
mom_demo_momdob <- get_field(token, field = "mom_demo_momdob")
mom_demo_momdob$redcap_event_name <- gsub("infant_visits_arm_1", "1", mom_demo_momdob$redcap_event_name)
mom_demo_momdob$redcap_event_name <- gsub("infant_30months_arm_1", "2", mom_demo_momdob$redcap_event_name)
mom_demo_momdob <- tidyr::pivot_wider(mom_demo_momdob, id_cols = record_id, names_from = redcap_event_name, values_from = mom_demo_momdob, names_prefix = "mom_demo_momdob_")
mom_dob <- dplyr::full_join(birth_date, mom_demo_momdob, by="record_id")
cols <- c("birth_date", "mom_demo_momdob_1", "mom_demo_momdob_2")
mom_dob[cols] <- lapply(mom_dob[cols], as.Date, format = "%Y-%m-%d")
mom_dob$birth_date <- ifelse(mom_dob$birth_date > "2010-01-01" | mom_dob$birth_date < "1950-01-01", NA_real_, mom_dob$birth_date)
mom_dob$mom_demo_momdob_1 <- ifelse(mom_dob$mom_demo_momdob_1 > "2010-01-01" | mom_dob$mom_demo_momdob_1 < "1950-01-01", NA_real_, mom_dob$mom_demo_momdob_1)
mom_dob$mom_demo_momdob_2 <- ifelse(mom_dob$mom_demo_momdob_2 > "2010-01-01" | mom_dob$mom_demo_momdob_2 < "1950-01-01", NA_real_, mom_dob$mom_demo_momdob_2)
mom_dob[cols] <- lapply(mom_dob[cols], as.Date, origin="1970-01-01")
mom_dob$mom_dob_final <- dplyr::case_when(
!is.na(mom_dob$mom_demo_momdob_2) ~ mom_dob$mom_demo_momdob_2,
is.na(mom_dob$mom_demo_momdob_2) & !is.na(mom_dob$mom_demo_momdob_1) ~ mom_dob$mom_demo_momdob_1,
is.na(mom_dob$mom_demo_momdob_2) & is.na(mom_dob$mom_demo_momdob_1) & !is.na(mom_dob$birth_date) ~ mom_dob$birth_date
)
mom_dob <- dplyr::select(mom_dob, record_id, mom_dob_final)
return(mom_dob)
}
mom_dob <- get_mom_dob(token)
View(mom_dob)
ripple <- get_data(token, form = "ripple_tracking_information")
ripple <- dplyr::filter(ripple, ripple_added == 1)
mom_dob <- get_mom_dob(token)
survey_name <- get_field(token, field = "survey_name")
baseline_2021 <- get_data(token, form = "baseline_consent_2021")
baseline_2021 <- dplyr::select(baseline_2021, record_id, participant_full_name_b21, consent_agree_b21)
baseline_2021 <- dplyr::filter(baseline_2021, consent_agree_b21 == 1)
consent_form <- get_data(token, form = 'consent_form')
consent_form <- dplyr::select(consent_form, record_id, consent_agree, participant_full_name)
ripple <- get_data(token, form = "ripple_tracking_information")
ripple <- dplyr::filter(ripple, ripple_added == 1)
mom_dob <- get_mom_dob(token)
survey_name <- get_field(token, field = "survey_name")
baseline_2021 <- get_data(token, form = "baseline_consent_2021")
baseline_2021 <- dplyr::select(baseline_2021, record_id, participant_full_name_b21, consent_agree_b21)
baseline_2021 <- dplyr::filter(baseline_2021, consent_agree_b21 == 1)
consent_form <- get_data(token, form = 'consent_form')
consent_form <- dplyr::select(consent_form, record_id, consent_agree, participant_full_name)
get_ripple_baseline <- function(token) {
ripple <- get_data(token, form = "ripple_tracking_information")
ripple <- dplyr::filter(ripple, ripple_added == 1)
mom_dob <- get_mom_dob(token)
survey_name <- get_field(token, field = "survey_name")
baseline_2021 <- get_data(token, form = "baseline_consent_2021")
baseline_2021 <- dplyr::select(baseline_2021, record_id, participant_full_name_b21, consent_agree_b21)
baseline_2021 <- dplyr::filter(baseline_2021, consent_agree_b21 == 1)
consent_form <- get_data(token, form = 'consent_form')
consent_form <- dplyr::select(consent_form, record_id, consent_agree, participant_full_name)
ripple_baseline <- dplyr::left_join(baseline_2021, ripple, by="record_id")
ripple_baseline <- dplyr::filter(ripple_baseline, ripple_added != 1)
ripple_baseline <- dplyr::left_join(ripple_baseline, mom_dob, by="record_id")
ripple_baseline <- dplyr::left_join(ripple_baseline,survey_name, by="record_id")
ripple_baseline <- dplyr::left_join(ripple_baseline, consent_form, by="record_id")
ripple_baseline <- dplyr::select(ripple_baseline, -contains(c("redcap", "birthday")))
ripple_baseline <- dplyr::rename(ripple_baseline,
globalId=globalid,
firstName=firstname,
middleName=middlename,
lastName=lastname)
ripple_baseline$mom_dob_final <- ifelse(is.na(ripple_baseline$mom_dob_final), "1901-01-01", ripple_baseline$mom_dob_final)
ripple_baseline$mom_dob_final <- as.Date(ripple_baseline$mom_dob_final, format = "%Y-%m-%d")
ripple_baseline$customId <- ripple_baseline$record_id
ripple_baseline$importType <- "yB7HwohSmvec2hRL2"
#add code to reorder the columns as appropriate and print error message if there is no IDs to import
return (ripple_baseline)
}
ripple <- get_ripple_baseline(token)
View(ripple)
get_ripple_baseline <- function(token) {
ripple <- get_data(token, form = "ripple_tracking_information")
ripple <- dplyr::filter(ripple, ripple_added == 1)
mom_dob <- get_mom_dob(token)
survey_name <- get_field(token, field = "survey_name")
baseline_2021 <- get_data(token, form = "baseline_consent_2021")
baseline_2021 <- dplyr::select(baseline_2021, record_id, participant_full_name_b21, consent_agree_b21)
baseline_2021 <- dplyr::filter(baseline_2021, consent_agree_b21 == 1)
consent_form <- get_data(token, form = 'consent_form')
consent_form <- dplyr::select(consent_form, record_id, consent_agree, participant_full_name)
ripple_baseline <- dplyr::left_join(baseline_2021, ripple, by="record_id")
ripple_baseline <- dplyr::filter(ripple_baseline, ripple_added != 1)
ripple_baseline <- dplyr::left_join(ripple_baseline, mom_dob, by="record_id")
ripple_baseline <- dplyr::left_join(ripple_baseline,survey_name, by="record_id")
ripple_baseline <- dplyr::left_join(ripple_baseline, consent_form, by="record_id")
ripple_baseline <- dplyr::select(ripple_baseline, -contains(c("redcap", "birthday")))
ripple_baseline <- dplyr::rename(ripple_baseline,
globalId=globalid,
firstName=firstname,
middleName=middlename,
lastName=lastname)
ripple_baseline$mom_dob_final <- ifelse(is.na(ripple_baseline$mom_dob_final), "1901-01-01", ripple_baseline$mom_dob_final)
ripple_baseline$mom_dob_final <- as.Date(ripple_baseline$mom_dob_final, format = "%Y-%m-%d")
ripple_baseline$customId <- ripple_baseline$record_id
ripple_baseline$importType <- "yB7HwohSmvec2hRL2"
if (nrow(ripple_baseline) == 0) {
message("There are no new IDs to import to ripple")
} else {
return(ripple_baseline)
}
}
ripple <- get_ripple_baseline(token)
devtools::install_github("denisemw/CopeData")
library(CopeData)
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
get_child_dob(token)
devtools::install_github("denisemw/CopeData")
library(CopeData)
get_child_dob(token)
get_child_dob <- function(token) {
mhx_babydob <- get_field(token, field="mhx_babydob")
mhx_babydob$redcap_event_name <- gsub("infant_visits_arm_1", "1", mhx_babydob$redcap_event_name)
mhx_babydob$redcap_event_name <- gsub("infant_30months_arm_1", "2", mhx_babydob$redcap_event_name)
mhx_babydob <- tidyr::pivot_wider(mhx_babydob, id_cols = record_id, names_from = redcap_event_name, values_from = mhx_babydob, names_prefix = "mhx_babydob_")
welcome_30 <- get_field(token, field="month30_dob_welcome")
welcome_30 <- dplyr::select(welcome_30, record_id, month30_dob_welcome)
infant_visit_dob <- get_field(token, field="infant_visit_dob")
infant_visit_dob$redcap_event_name <- gsub("infant_6months_arm_1", "1", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_9months_arm_1", "2", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_12months2_arm_1", "3", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_18months_arm_1", "4", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_30months_arm_1", "5", infant_visit_dob$redcap_event_name)
infant_visit_dob <- tidyr::pivot_wider(infant_visit_dob, id_cols = record_id, names_from = redcap_event_name, values_from = infant_visit_dob, names_prefix = "infant_visit_dob_")
infant_visit_dob <- dplyr::select(infant_visit_dob,record_id, infant_visit_dob_1, infant_visit_dob_2, infant_visit_dob_3, infant_visit_dob_4, infant_visit_dob_5)
bio_dob <- get_field(token, field="bio_dob")
bio_dob <- dplyr::select(bio_dob, -redcap_event_name)
child_birth_date <- get_field(token, field = "child_birth_date2")
child_birth_date$redcap_event_name <- gsub("covid_week_2_follo_arm_1", "1", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_4_follo_arm_1", "2", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_6_follo_arm_1", "3", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_8_follo_arm_1", "4", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_10_foll_arm_1", "5", child_birth_date$redcap_event_name)
child_birth_date <- tidyr::pivot_wider(child_birth_date, id_cols = record_id, names_from = redcap_event_name, values_from = child_birth_date2, names_prefix = "child_birth_date_")
for (i in 1:nrow(child_birth_date)) {
row_vec <- na.omit(as.numeric(child_birth_date[i, 2:6]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
child_birth_date[i, "child_birth_date"] <- row_vec[1]
}
child_birth_date <- dplyr::select(child_birth_date, record_id, child_birth_date)
pregnant_due_date <- get_field(token, field="pregnant_due_date")
pregnant_due_date <- dplyr::distinct(pregnant_due_date, record_id, .keep_all=T)
pregnant_due_date <- dplyr::select(pregnant_due_date, -redcap_event_name)
dobs <- dplyr::full_join(bio_dob, mhx_babydob, by="record_id")
dobs <- dplyr::full_join(dobs, child_birth_date, by="record_id")
dobs <- dplyr::full_join(dobs, infant_visit_dob, by="record_id")
dobs <- dplyr::full_join(dobs, welcome_30, by="record_id")
dobs <- dplyr::left_join(dobs, pregnant_due_date, by="record_id")
cols <- c("bio_dob","mhx_babydob_1", "mhx_babydob_2", "child_birth_date", "infant_visit_dob_1", "infant_visit_dob_2", "infant_visit_dob_3", "infant_visit_dob_4", "infant_visit_dob_5", "month30_dob_welcome", "pregnant_due_date")
dobs[cols] <- lapply(dobs[cols], as.Date, format = "%Y-%m-%d")
dobs$bio_dob <- ifelse(dobs$bio_dob > Sys.Date() | dobs$bio_dob < "2018-01-01", NA_real_, dobs$bio_dob)
dobs$mhx_babydob_1 <- ifelse(dobs$mhx_babydob_1 > Sys.Date() | dobs$mhx_babydob_1 < "2018-01-01", NA_real_, dobs$mhx_babydob_1)
dobs$mhx_babydob_2 <- ifelse(dobs$mhx_babydob_2 > Sys.Date() | dobs$mhx_babydob_2 < "2018-01-01", NA_real_, dobs$mhx_babydob_2)
dobs$infant_visit_dob_1 <- ifelse(dobs$infant_visit_dob_1 >= Sys.Date() | dobs$infant_visit_dob_1 < "2018-01-01", NA_real_, dobs$infant_visit_dob_1)
dobs$infant_visit_dob_2 <- ifelse(dobs$infant_visit_dob_2 >= Sys.Date() | dobs$infant_visit_dob_2 < "2018-01-01", NA_real_, dobs$infant_visit_dob_2)
dobs$infant_visit_dob_3 <- ifelse(dobs$infant_visit_dob_3 >= Sys.Date() | dobs$infant_visit_dob_3 < "2018-01-01", NA_real_, dobs$infant_visit_dob_3)
dobs$infant_visit_dob_4 <- ifelse(dobs$infant_visit_dob_4 >= Sys.Date() | dobs$infant_visit_dob_4 < "2018-01-01", NA_real_, dobs$infant_visit_dob_4)
dobs$infant_visit_dob_5 <- ifelse(dobs$infant_visit_dob_5 >= Sys.Date() | dobs$infant_visit_dob_5 < "2018-01-01", NA_real_, dobs$infant_visit_dob_5)
dobs$month30_dob_welcome <- ifelse(dobs$month30_dob_welcome >= Sys.Date() | dobs$month30_dob_welcome < "2018-01-01", NA_real_, dobs$month30_dob_welcome)
dobs$child_birth_date <- ifelse(dobs$child_birth_date >= Sys.Date() | dobs$child_birth_date < "2018-01-01", NA_real_, dobs$child_birth_date)
dobs$pregnant_due_date <- ifelse(dobs$pregnant_due_date < "2018-01-01", NA_real_, dobs$pregnant_due_date)
dobs[cols] <- lapply(dobs[cols], as.Date, origin="1970-01-01")
for (i in 1:nrow(dobs)) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
dobs[i, "final_child_dob"] <- row_vec[1]
}
for (i in 1:nrow(dobs)) {
if (is.na(dobs$final_child_dob[i])) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
col_names <- names(dobs[, 2:11])[!is.na(dobs[i, 2:11])]
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {
dobs[i, "final_child_dob"] <- min(row_vec)
message(paste("Discrepancy for ID ", dobs$record_id[i]), " - earliest date used, double check")
}else{
message(paste("No DOB for ID ", dobs$record_id[i]), " - double check")
}
}
}
dobs <- dplyr::select(dobs, record_id, final_child_dob, pregnant_due_date)
dobs$pregnant_due_date <- ifelse(!is.na(dobs$final_child_dob), NA, dobs$pregnant_due_date)
dobs$pregnant_due_date <- as.Date(dobs$pregnant_due_date, origin = "1970-01-01")
dobs$child_current_age <- as.numeric(difftime(Sys.Date(), dobs$final_child_dob, units = "days"))
dobs$expected_child_age <- as.numeric(difftime(Sys.Date(), dobs$pregnant_due_date, units="days"))
dobs <- dplyr::rename(dobs, child_dob_final = final_child_dob)
return(dobs)
}
detach("package:CopeData", unload = TRUE)
remove.packages("CopeData")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
devtools::install_github("denisemw/CopeData")
library(CopeData)
get_child_dob(token)
dobs <- get_child_dob(token)
mom_dob <- get_mom_dob(token)
visits <- get_data(token, form="infant_visit_date_and_age_tracker")
View(visits)
timepoints <- get_all_timepoints(token)
View(timepoints)
x <- get_visit_n(token, timepoint = "infant_6months_arm_1")
visit_data <- get_visit_data(token, timepoint="infant_6months_arm_1")
View(visit_data)
field <- get_field(token, field="birthday")
survey <- get_survey_data(token, form="fnirs_consent", event="infant_30months_arm_1")
View(field)
View(survey)
library(OrcaData)
token <- '2338CA1AE27CE6932A075CF7B7931827'
orca <- get_orca_data(token, form="virtual_visit")
View(orca)
orca <- get_orca_data(token, form="sociodemographic")
View(orca)
orca <- orca %>%
select(record_id, child_dob)
library(tidyverse)
orca <- orca %>%
select(record_id, child_dob)
str(orca$child_dob)
orca$current_age <- difftime(Sys.Date(), orca$child_dob, units = "days")/30.44
View(orca)
orca <- orca %>%
mutate(contact = case_when(
current_age >= 8 & current_age <= 10 ~ "CONTACT"
))
token <- "750E40D4BEB281C10E3659D2B41692FC"
url <- "https://openredcap.nyumc.org/apps/redcap/api/"
library(CopeData)
child_dob <- get_child_dob(token)
View(child_dob)
ripple <- get_data(token, form="ripple_tracking_information")
View(ripple)
ripple <- ripple %>%
select(record_id, globalid, firstname, middlename, lastname) %>%
rename(customId = record_id,
globalId = globalid,
firstName = firstname,
middleName = middlename,
lastName = lastname)
child_dob <- get_child_dob(token)
ripple <- get_data(token, form="ripple_tracking_information")
ripple <- ripple %>%
select(record_id, globalid, firstname, middlename, lastname) %>%
left_join(child_dob, by="record_id")
rename(customId = record_id,
globalId = globalid,
firstName = firstname,
middleName = middlename,
lastName = lastname)
ripple <- ripple %>%
select(record_id, globalid, firstname, middlename, lastname) %>%
left_join(child_dob, by="record_id") %>%
rename(customId = record_id,
globalId = globalid,
firstName = firstname,
middleName = middlename,
lastName = lastname)
View(ripple)
bio_edd <- get_field(token, field = "bio_edd")
View(bio_edd)
pregnant_due_date <- get_field(token, field="pregnant_due_date")
View(pregnant_due_date)
pregnant_due_date <- pregnant_due_date %>%
full_join(bio_edd, by="record_id") %>%
select(-redcap_event_name)
pregnant_due_date <- pregnant_due_date %>%
full_join(bio_edd, by="record_id") %>%
select(-redcap_event_name.x, -redcap_event_name.y)
mhx_babydob <- get_field(token, field="mhx_babydob")
mhx_babydob$redcap_event_name <- gsub("infant_visits_arm_1", "1", mhx_babydob$redcap_event_name)
mhx_babydob$redcap_event_name <- gsub("infant_30months_arm_1", "2", mhx_babydob$redcap_event_name)
mhx_babydob <- tidyr::pivot_wider(mhx_babydob, id_cols = record_id, names_from = redcap_event_name, values_from = mhx_babydob, names_prefix = "mhx_babydob_")
welcome_30 <- get_field(token, field="month30_dob_welcome")
welcome_30 <- dplyr::select(welcome_30, record_id, month30_dob_welcome)
infant_visit_dob <- get_field(token, field="infant_visit_dob")
infant_visit_dob$redcap_event_name <- gsub("infant_6months_arm_1", "1", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_9months_arm_1", "2", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_12months2_arm_1", "3", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_18months_arm_1", "4", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_30months_arm_1", "5", infant_visit_dob$redcap_event_name)
infant_visit_dob <- tidyr::pivot_wider(infant_visit_dob, id_cols = record_id, names_from = redcap_event_name, values_from = infant_visit_dob, names_prefix = "infant_visit_dob_")
infant_visit_dob <- dplyr::select(infant_visit_dob,record_id, infant_visit_dob_1, infant_visit_dob_2, infant_visit_dob_3, infant_visit_dob_4, infant_visit_dob_5)
bio_dob <- get_field(token, field="bio_dob")
bio_dob <- dplyr::select(bio_dob, -redcap_event_name)
child_birth_date <- get_field(token, field = "child_birth_date2")
child_birth_date$redcap_event_name <- gsub("covid_week_2_follo_arm_1", "1", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_4_follo_arm_1", "2", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_6_follo_arm_1", "3", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_8_follo_arm_1", "4", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_10_foll_arm_1", "5", child_birth_date$redcap_event_name)
child_birth_date <- tidyr::pivot_wider(child_birth_date, id_cols = record_id, names_from = redcap_event_name, values_from = child_birth_date2, names_prefix = "child_birth_date_")
for (i in 1:nrow(child_birth_date)) {
row_vec <- na.omit(as.numeric(child_birth_date[i, 2:6]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
child_birth_date[i, "child_birth_date"] <- row_vec[1]
}
child_birth_date <- dplyr::select(child_birth_date, record_id, child_birth_date)
pregnant_due_date <- get_field(token, field="pregnant_due_date")
pregnant_due_date <- dplyr::distinct(pregnant_due_date, record_id, .keep_all=T)
pregnant_due_date <- dplyr::select(pregnant_due_date, -redcap_event_name)
bio_edd <- get_field(token, field="bio_edd")
View(bio_edd)
bio_edd <- dplyr::select(bio_edd, -redcap_event_name)
dobs <- dplyr::full_join(bio_dob, mhx_babydob, by="record_id")
dobs <- dplyr::full_join(dobs, child_birth_date, by="record_id")
dobs <- dplyr::full_join(dobs, infant_visit_dob, by="record_id")
dobs <- dplyr::full_join(dobs, welcome_30, by="record_id")
dobs <- dplyr::full_join(dobs, pregnant_due_date, by="record_id")
dobs <- dplyr::full_join(dobs, bio_edd, by="record_id")
View(dobs)
cols <- c("bio_dob","mhx_babydob_1", "mhx_babydob_2", "child_birth_date", "infant_visit_dob_1", "infant_visit_dob_2", "infant_visit_dob_3", "infant_visit_dob_4", "infant_visit_dob_5", "month30_dob_welcome", "pregnant_due_date", "bio_edd")
dobs$bio_edd <- ifelse(dobs$bio_edd < "2018-01-01", NA_real_, dobs$bio_edd)
dobs$bio_dob <- ifelse(dobs$bio_dob > Sys.Date() | dobs$bio_dob < "2018-01-01", NA_real_, dobs$bio_dob)
dobs$mhx_babydob_1 <- ifelse(dobs$mhx_babydob_1 > Sys.Date() | dobs$mhx_babydob_1 < "2018-01-01", NA_real_, dobs$mhx_babydob_1)
dobs$mhx_babydob_2 <- ifelse(dobs$mhx_babydob_2 > Sys.Date() | dobs$mhx_babydob_2 < "2018-01-01", NA_real_, dobs$mhx_babydob_2)
dobs$infant_visit_dob_1 <- ifelse(dobs$infant_visit_dob_1 >= Sys.Date() | dobs$infant_visit_dob_1 < "2018-01-01", NA_real_, dobs$infant_visit_dob_1)
dobs$infant_visit_dob_2 <- ifelse(dobs$infant_visit_dob_2 >= Sys.Date() | dobs$infant_visit_dob_2 < "2018-01-01", NA_real_, dobs$infant_visit_dob_2)
dobs$infant_visit_dob_3 <- ifelse(dobs$infant_visit_dob_3 >= Sys.Date() | dobs$infant_visit_dob_3 < "2018-01-01", NA_real_, dobs$infant_visit_dob_3)
dobs$infant_visit_dob_4 <- ifelse(dobs$infant_visit_dob_4 >= Sys.Date() | dobs$infant_visit_dob_4 < "2018-01-01", NA_real_, dobs$infant_visit_dob_4)
dobs$infant_visit_dob_5 <- ifelse(dobs$infant_visit_dob_5 >= Sys.Date() | dobs$infant_visit_dob_5 < "2018-01-01", NA_real_, dobs$infant_visit_dob_5)
dobs$month30_dob_welcome <- ifelse(dobs$month30_dob_welcome >= Sys.Date() | dobs$month30_dob_welcome < "2018-01-01", NA_real_, dobs$month30_dob_welcome)
dobs$child_birth_date <- ifelse(dobs$child_birth_date >= Sys.Date() | dobs$child_birth_date < "2018-01-01", NA_real_, dobs$child_birth_date)
dobs$pregnant_due_date <- ifelse(dobs$pregnant_due_date < "2018-01-01", NA_real_, dobs$pregnant_due_date)
dobs[cols] <- lapply(dobs[cols], as.Date, origin="1970-01-01")
for (i in 1:nrow(dobs)) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
dobs[i, "final_child_dob"] <- row_vec[1]
}
for (i in 1:nrow(dobs)) {
if (is.na(dobs$final_child_dob[i])) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
col_names <- names(dobs[, 2:11])[!is.na(dobs[i, 2:11])]
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {
dobs[i, "final_child_dob"] <- min(row_vec)
message(paste("Discrepancy for ID ", dobs$record_id[i]), " - earliest date used, double check")
}else{
message(paste("No DOB for ID ", dobs$record_id[i]), " - double check")
}
}
}
for (i in 1:nrow(dobs)) {
if (is.na(dobs$final_child_dob[i])) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
col_names <- names(dobs[, 2:11])[!is.na(dobs[i, 2:11])]
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {
dobs[i, "final_child_dob"] <- min(row_vec)
message(paste("Discrepancy for ID ", dobs$record_id[i]), " - earliest date used, double check")
}
}
}
for (i in 1:nrow(dobs)) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
dobs[i, "final_child_dob"] <- row_vec[1]
}
for (i in 1:nrow(dobs)) {
if (is.na(dobs$final_child_dob[i])) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
col_names <- names(dobs[, 2:11])[!is.na(dobs[i, 2:11])]
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {
dobs[i, "final_child_dob"] <- min(row_vec)
message(paste("Discrepancy for ID ", dobs$record_id[i]), " - earliest date used, double check")
}
}
}
dobs$due_date <- ifelse(!is.na(dobs$pregnant_due_date), dobs$pregnant_due_date, dobs$bio_edd)
dobs$due_date <- as.Date(dobs$due_date, origin="1970-01-01")
dobs <- dplyr::select(dobs, record_id, final_child_dob, due_date)
dobs$child_current_age <- as.numeric(difftime(Sys.Date(), dobs$final_child_dob, units = "days"))
dobs$expected_child_age <- as.numeric(difftime(Sys.Date(), dobs$due_date, units="days"))
dobs <- dplyr::rename(dobs, child_dob_final = final_child_dob)
#' Generates Child DOB Info
#'
#' Parses through all child DOB variable, removes errors, returns final date & age in days
#' For IDs with no DOB data, also returns due date & expected age based on that
#' For IDs with only 2 DOB entries, both different, the earliest will be chosen & a message printed indicating that ID should be checked
#'
#' @param token Unique REDCap token ID
#' @return data frame of record id and most recent/accurate child_dob variable & IDs to check manually
#' @export
get_child_dob <- function(token) {
mhx_babydob <- get_field(token, field="mhx_babydob")
mhx_babydob$redcap_event_name <- gsub("infant_visits_arm_1", "1", mhx_babydob$redcap_event_name)
mhx_babydob$redcap_event_name <- gsub("infant_30months_arm_1", "2", mhx_babydob$redcap_event_name)
mhx_babydob <- tidyr::pivot_wider(mhx_babydob, id_cols = record_id, names_from = redcap_event_name, values_from = mhx_babydob, names_prefix = "mhx_babydob_")
welcome_30 <- get_field(token, field="month30_dob_welcome")
welcome_30 <- dplyr::select(welcome_30, record_id, month30_dob_welcome)
infant_visit_dob <- get_field(token, field="infant_visit_dob")
infant_visit_dob$redcap_event_name <- gsub("infant_6months_arm_1", "1", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_9months_arm_1", "2", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_12months2_arm_1", "3", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_18months_arm_1", "4", infant_visit_dob$redcap_event_name)
infant_visit_dob$redcap_event_name <- gsub("infant_30months_arm_1", "5", infant_visit_dob$redcap_event_name)
infant_visit_dob <- tidyr::pivot_wider(infant_visit_dob, id_cols = record_id, names_from = redcap_event_name, values_from = infant_visit_dob, names_prefix = "infant_visit_dob_")
infant_visit_dob <- dplyr::select(infant_visit_dob,record_id, infant_visit_dob_1, infant_visit_dob_2, infant_visit_dob_3, infant_visit_dob_4, infant_visit_dob_5)
bio_dob <- get_field(token, field="bio_dob")
bio_dob <- dplyr::select(bio_dob, -redcap_event_name)
child_birth_date <- get_field(token, field = "child_birth_date2")
child_birth_date$redcap_event_name <- gsub("covid_week_2_follo_arm_1", "1", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_4_follo_arm_1", "2", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_6_follo_arm_1", "3", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_8_follo_arm_1", "4", child_birth_date$redcap_event_name)
child_birth_date$redcap_event_name <- gsub("covid_week_10_foll_arm_1", "5", child_birth_date$redcap_event_name)
child_birth_date <- tidyr::pivot_wider(child_birth_date, id_cols = record_id, names_from = redcap_event_name, values_from = child_birth_date2, names_prefix = "child_birth_date_")
for (i in 1:nrow(child_birth_date)) {
row_vec <- na.omit(as.numeric(child_birth_date[i, 2:6]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
child_birth_date[i, "child_birth_date"] <- row_vec[1]
}
child_birth_date <- dplyr::select(child_birth_date, record_id, child_birth_date)
pregnant_due_date <- get_field(token, field="pregnant_due_date")
pregnant_due_date <- dplyr::distinct(pregnant_due_date, record_id, .keep_all=T)
pregnant_due_date <- dplyr::select(pregnant_due_date, -redcap_event_name)
bio_edd <- get_field(token, field="bio_edd")
bio_edd <- dplyr::select(bio_edd, -redcap_event_name)
dobs <- dplyr::full_join(bio_dob, mhx_babydob, by="record_id")
dobs <- dplyr::full_join(dobs, child_birth_date, by="record_id")
dobs <- dplyr::full_join(dobs, infant_visit_dob, by="record_id")
dobs <- dplyr::full_join(dobs, welcome_30, by="record_id")
dobs <- dplyr::full_join(dobs, pregnant_due_date, by="record_id")
dobs <- dplyr::full_join(dobs, bio_edd, by="record_id")
cols <- c("bio_dob","mhx_babydob_1", "mhx_babydob_2", "child_birth_date", "infant_visit_dob_1", "infant_visit_dob_2", "infant_visit_dob_3", "infant_visit_dob_4", "infant_visit_dob_5", "month30_dob_welcome", "pregnant_due_date", "bio_edd")
dobs[cols] <- lapply(dobs[cols], as.Date, format = "%Y-%m-%d")
dobs$bio_dob <- ifelse(dobs$bio_dob > Sys.Date() | dobs$bio_dob < "2018-01-01", NA_real_, dobs$bio_dob)
dobs$mhx_babydob_1 <- ifelse(dobs$mhx_babydob_1 > Sys.Date() | dobs$mhx_babydob_1 < "2018-01-01", NA_real_, dobs$mhx_babydob_1)
dobs$mhx_babydob_2 <- ifelse(dobs$mhx_babydob_2 > Sys.Date() | dobs$mhx_babydob_2 < "2018-01-01", NA_real_, dobs$mhx_babydob_2)
dobs$infant_visit_dob_1 <- ifelse(dobs$infant_visit_dob_1 >= Sys.Date() | dobs$infant_visit_dob_1 < "2018-01-01", NA_real_, dobs$infant_visit_dob_1)
dobs$infant_visit_dob_2 <- ifelse(dobs$infant_visit_dob_2 >= Sys.Date() | dobs$infant_visit_dob_2 < "2018-01-01", NA_real_, dobs$infant_visit_dob_2)
dobs$infant_visit_dob_3 <- ifelse(dobs$infant_visit_dob_3 >= Sys.Date() | dobs$infant_visit_dob_3 < "2018-01-01", NA_real_, dobs$infant_visit_dob_3)
dobs$infant_visit_dob_4 <- ifelse(dobs$infant_visit_dob_4 >= Sys.Date() | dobs$infant_visit_dob_4 < "2018-01-01", NA_real_, dobs$infant_visit_dob_4)
dobs$infant_visit_dob_5 <- ifelse(dobs$infant_visit_dob_5 >= Sys.Date() | dobs$infant_visit_dob_5 < "2018-01-01", NA_real_, dobs$infant_visit_dob_5)
dobs$month30_dob_welcome <- ifelse(dobs$month30_dob_welcome >= Sys.Date() | dobs$month30_dob_welcome < "2018-01-01", NA_real_, dobs$month30_dob_welcome)
dobs$child_birth_date <- ifelse(dobs$child_birth_date >= Sys.Date() | dobs$child_birth_date < "2018-01-01", NA_real_, dobs$child_birth_date)
dobs$pregnant_due_date <- ifelse(dobs$pregnant_due_date < "2018-01-01", NA_real_, dobs$pregnant_due_date)
dobs$bio_edd <- ifelse(dobs$bio_edd < "2018-01-01", NA_real_, dobs$bio_edd)
dobs[cols] <- lapply(dobs[cols], as.Date, origin="1970-01-01")
for (i in 1:nrow(dobs)) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {row_vec <- row_vec[duplicated(row_vec)]}
dobs[i, "final_child_dob"] <- row_vec[1]
}
for (i in 1:nrow(dobs)) {
if (is.na(dobs$final_child_dob[i])) {
row_vec <- na.omit(as.numeric(dobs[i, 2:11]))
col_names <- names(dobs[, 2:11])[!is.na(dobs[i, 2:11])]
row_vec <- as.Date(row_vec, origin="1970-01-01")
if (length(row_vec) > 1) {
dobs[i, "final_child_dob"] <- min(row_vec)
message(paste("Discrepancy for ID ", dobs$record_id[i]), " - earliest date used, double check")
}
}
}
dobs$due_date <- ifelse(!is.na(dobs$pregnant_due_date), dobs$pregnant_due_date, dobs$bio_edd)
dobs$due_date <- as.Date(dobs$due_date, origin="1970-01-01")
dobs <- dplyr::select(dobs, record_id, final_child_dob, due_date)
dobs$child_current_age <- as.numeric(difftime(Sys.Date(), dobs$final_child_dob, units = "days"))
dobs$expected_child_age <- as.numeric(difftime(Sys.Date(), dobs$due_date, units="days"))
dobs <- dplyr::rename(dobs, child_dob_final = final_child_dob)
return(dobs)
}
child_dob <- get_child_dob(token)
roxygen2::roxygenise()
setwd("/Users/amyhume/CopeData")
roxygen2::roxygenise()
