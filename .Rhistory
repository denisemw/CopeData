roxygen2::roxygenise()
setwd("/Users/amyhume/CopeData")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
url <- "https://openredcap.nyumc.org/apps/redcap/api/"
#' Load a Matrix
#'
#' This function will download any requested survey from REDCap.
#' The following missing data codes in REDCap are replaced
#' with NA: -888,888, 8888, -999, 999, 9999. Only complete
#' surveys are returned.
#'
#'
#' @param token Unique REDCap token ID
#' @param form Name of the survey to be downloaded
#' @param raw_v_label Whether raw data or labels are requested
#' @param form_complete Whether complete or all surveys are downloaded (default is T)
#' @return A data frame for the completed surveys
#' @export
get_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
return (df)
}
## get record IDs from the Covid 19 Survey For Pregnant Women
preg_baseline = get_data(token, "covid19_survey_for_pregnant_women")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
## get record IDs from the Covid 19 Survey For Pregnant Women
preg_baseline = get_data(token, "covid19_survey_for_pregnant_women")
View(preg_baseline)
preg_baseline = preg_baseline[,c("record_id")]
chaos = get_data(token, "confusion_hubbub_and_order_scale_chaos")
View(chaos)
chaos$chaos_late = abs(5 - chaos$chaos_late)
chaos$chaos_zoo = abs(5 - chaos$chaos_zoo)
chaos$chaos_fuss = abs(5 - chaos$chaos_fuss)
chaos$chaos_plans = abs(5 - chaos$chaos_plans)
chaos$chaos_think = abs(5 - chaos$chaos_think)
chaos$chaos_arguement = abs(5 - chaos$chaos_arguement)
chaos$chaos_rushed = abs(5 - chaos$chaos_rushed)
chaos$total_score =  rowMeans(chaos[,c("chaos_late", "chaos_commotion","chaos_rushed", "chaos_interrupt", "chaos_plans",
"chaos_arguement", "chaos_routine","chaos_findthings", "chaos_ontop",
"chaos_zoo", "chaos_fuss", "chaos_think", "chaos_rushed", "chaos_relax", "chaos_calm")], na.rm=T)
chaos = chaos[,c("record_id", "redcap_event_name", "confusion_hubbub_and_order_scale_chaos_timestamp", "total_score")]
roxygen2::roxygenise()
asq = get_data(token, "asq3_6_month_questionnaire")
View(asq)
url <- "https://openredcap.nyumc.org/apps/redcap/api/"
#' Load a Matrix
#'
#' This function will download any requested survey from REDCap.
#' The following missing data codes in REDCap are replaced
#' with NA: -888,888, 8888, -999, 999, 9999. Only complete
#' surveys are returned.
#'
#'
#' @param token Unique REDCap token ID
#' @param form Name of the survey to be downloaded
#' @param raw_v_label Whether raw data or labels are requested
#' @param form_complete Whether complete or all surveys are downloaded (default is T)
#' @return A data frame for the completed surveys
#' @export
get_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
return (df)
}
get_data_old <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
return (df)
}
url <- "https://openredcap.nyumc.org/apps/redcap/api/"
#' Load a Matrix
#'
#' This function will download any requested survey from REDCap.
#' The following missing data codes in REDCap are replaced
#' with NA: -888,888, 8888, -999, 999, 9999. Only complete
#' surveys are returned.
#'
#'
#' @param token Unique REDCap token ID
#' @param form Name of the survey to be downloaded
#' @param raw_v_label Whether raw data or labels are requested
#' @param form_complete Whether complete or all surveys are downloaded (default is T)
#' @return A data frame for the completed surveys
#' @export
get_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
return (df)
}
asq = get_data(token, "asq3_6_month_questionnaire")
asq = get_data_old(token, "asq3_6_month_questionnaire")
asq = get_data(token, "asq3_6_month_questionnaire")
asq$comm = rowSums(asq[,7:12],na.rm=TRUE)
colnames(asq)
asq$comm = rowSums(asq[,7:12],na.rm=TRUE)
asq$grossmotor = rowSums(asq[,13:18],na.rm=TRUE)
asq$finemotor = rowSums(asq[,19:24],na.rm=TRUE)
asq$probsolve = rowSums(asq[,25:30],na.rm=TRUE)
asq$social = rowSums(asq[,31:36],na.rm=TRUE)
asq = asq[,c("record_id", "asq3_6_month_questionnaire_timestamp","comm", "grossmotor", "finemotor", "probsolve", "social")]
pss = get_data(token, "perceived_stress_scale_pss")
View(pss)
pss = pss[,c("record_id", "perceived_stress_scale_pss_timestamp", "pss_score", "pss_14_score")]
epds = get_data(token, "cope_epds")
View(epds)
epds$epds_1_v2 = 3 - epds$epds_1_v2
epds$epds_2_v2 = 3 - epds$epds_2_v2
epds$epds_all = epds$epds_1_v2 + epds$epds_2_v2 + epds$epds_3_v2 + epds$epds_4_v2 + epds$epds_5_v2 +
epds$epds_6_v2 + epds$epds_7_v2 + epds$epds_8_v2 + epds$epds_9_v2 + epds$epds_10_v2
epds$epds_dep = epds$epds_1_v2 + epds$epds_2_v2 + epds$epds_3_v2 +
epds$epds_7_v2 + epds$epds_8_v2 + epds$epds_9_v2 + epds$epds_10_v2
epds$epds_anx = epds$epds_4_v2 + epds$epds_5_v2 + epds$epds_6_v2
epds = epds[,c("record_id", "cope_epds_timestamp","epds_all", "epds_dep", "epds_anx")]
thq = get_data(token, "thq")
View(thq)
bitsea = get_data(token, "brief_infanttoddler_social_and_emotional_assessmen")
bitsea$autism_competence  = rowSums(bitsea[,c("bitsea_1", "bitsea_10", "bitsea_13", "bitsea_15",
"bitsea_22", "bitsea_25", "bitsea_29", "bitsea_031")], na.rm=T)
bitsea$autism_problems = rowSums(bitsea[,c("bitsea_9", "bitsea_14", "bitsea_21", "bitsea_35",
"bitsea_36", "bitsea_37", "bitsea_38", "bitsea_39",
"bitsea_40")], na.rm=T)
bitsea$autism_total = bitsea$autism_problems - bitsea$autism_competence
bitsea$problems = rowSums(bitsea[,c("bitsea_2", "bitsea_3", "bitsea_4", "bitsea_6", "bitsea_7", "bitsea_8",
"bitsea_9", "bitsea_11", "bitsea_12", "bitsea_14", "bitsea_16", "bitsea_17",
"bitsea_18", "bitsea_21", "bitsea_23", "bitsea_24", "bitsea_26", "bitsea_27",
"bitsea_28", "bitsea_30", "bitsea_032", "bitsea_033", "bitsea_034", "bitsea_35",
"bitsea_36", "bitsea_37", "bitsea_38", "bitsea_39", "bitsea_40",
"bitsea_041", "bitsea_042")], na.rm=T)
bitsea$competence = rowSums(bitsea[,c("bitsea_1", "bitsea_5", "bitsea_10", "bitsea_13", "bitsea_15",
"bitsea_19", "bitsea_20", "bitsea_22", "bitsea_25", "bitsea_29", "bitsea_031")], na.rm=T)
View(bitsea)
colnames(bitsea)
bitsea = bitsea[,c("record_id", "brief_infanttoddler_social_and_emotional_assessmen_timestamp","autism_competence", "autism_problems", "autism_total", "competence", "problems")]
View(bitsea)
bitsea$problem_thres = 0
bitsea[bitsea$problems > 11,"problem_thres"] = 1
bitsea$competence_thres = 0
bitsea[bitsea$competence < 13,"competence_thres"] = 1
bitsea$autism_total_thresh = 0
bitsea[bitsea$autism_total > 7,"autism_total_thresh"] = 1
bitsea$autism_comp_thresh = 0
bitsea[bitsea$competence < 12,"autism_comp_thresh"] = 1
bitsea$autism_prob_thresh = 0
bitsea[bitsea$autism_problems > 4,"autism_prob_thresh"] = 1
parent_stress = get_data("parenting_stress_index_fourth_edition_short_form_p")
parent_stress = get_data(token, timepoint = "parenting_stress_index_fourth_edition_short_form_p")
get_parent_stress <- function(token, timepoint = "infant_9months_arm_1") {
parent_stress = get_data(token, timepoint = "parenting_stress_index_fourth_edition_short_form_p")
parent_stress = parent_stress %>% dplyr::filter(redcap_event_name == timepoint)
parent_stress$psi = rowMeans(parent_stress[, 5:40])
parent_stress = parent_stress[,c("record_id", "psi")]
return (parent_stress)
}
parent_stress = get_data(token, form = "parenting_stress_index_fourth_edition_short_form_p")
View(parent_stress)
colnames(parent_stress)
parent_stress$psi = rowMeans(parent_stress[, 7:42])
parent_stress = parent_stress[,c("record_id", "parenting_stress_index_fourth_edition_short_form_p_timestamp","psi")]
mpas = get_data(token, "maternal_postnatal_attachment_scale_mpas")
parent_strain = get_data(token, "parenting_stress_role_strain_covid")
View(parent_strain)
cols = c(1,8,10,12,14,16,18,20,22)
parent_strain = parent_strain[,cols]
parent_strain = get_data(token, "parenting_stress_role_strain_covid", form_complete = T)
cols = c(1,6,8,10,12,14,16,18,20,22)
parent_strain = parent_strain[,cols]
parent_strain$strain = rowMeans(parent_strain[,3:10])
colnames(parent_strain)
parent_strain = parent_strain[,c("record_id", "parenting_stress_role_strain_covid_timestamp","strain")]
ibq = get_data(token, "infant_behavior_questionnaire_very_short_form")
colnames(ibq)
ibq$ibqr_11_r = 8 - ibq$ibqr_11
ibq$ibq_ec = rowMeans(ibq[, c("ibqr_05","ibqr_06","ibqr_11_r","ibqr_12","ibqr_18","ibqr_19",
"ibqr_24","ibqr_25","ibqr_30","ibqr_31","ibqr_34","ibqr_35")], na.rm=T)
ibq$ibq_neg = rowMeans(ibq[, c("ibqr_03","ibqr_04","ibqr_09","ibqr_10","ibqr_16","ibqr_17",
"ibqr_22","ibqr_23","ibqr_28","ibqr_29","ibqr_32","ibqr_33")], na.rm=T)
ibq$ibq_sur = rowMeans(ibq[, c("ibqr_01","ibqr_02","ibqr_07","ibqr_08","ibqr_13","ibqr_14",
"ibqr_15","ibqr_20","ibqr_21","ibqr_26","ibqr_27","ibqr_36", "ibqr_37")], na.rm=T)
ibq = ibq[,c("record_id", "infant_behavior_questionnaire_very_short_form_timestamp","ibq_sur", "ibq_neg", "ibq_ec")]
View(ibq)
roxygen2::roxygenise()
